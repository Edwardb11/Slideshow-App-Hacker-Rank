{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/Slides.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Slides","slides","React","useState","current","setCurrent","className","data-testid","disabled","onClick","length","App","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","title","text","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"sKAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,mGCiBFgB,EAvCA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACCC,IAAMC,SAAS,GADhB,mBACtBC,EADsB,KACbC,EADa,KAG7B,OACE,6BACE,yBAAKV,GAAG,aAAaW,UAAU,eAC7B,4BACEC,cAAY,iBACZC,SAAsB,IAAZJ,EACVK,QAAS,kBAAMJ,EAAW,IAC1BC,UAAU,kBAJZ,WAQA,4BACEC,cAAY,cACZC,SAAsB,IAAZJ,EACVK,QAAS,kBAAMJ,EAAWD,EAAU,IACpCE,UAAU,SAJZ,QAQA,4BACEC,cAAY,cACZE,QAAS,kBAAMJ,EAAWD,EAAU,IACpCI,SAAUJ,IAAYH,EAAOS,OAAS,EACtCJ,UAAU,SAJZ,SASF,yBAAKX,GAAG,QAAQW,UAAU,oBACxB,wBAAIC,cAAY,SAASN,EAAOG,GAAP,OACzB,uBAAGG,cAAY,QAAQN,EAAOG,GAAP,SClBhBO,EAXH,SAAC,GAAgB,IAAdV,EAAa,EAAbA,OACb,OACE,6BACE,gCAAYW,OALJ,kBAMR,yBAAKN,UAAU,OACb,kBAAC,EAAD,CAAQL,OAAQA,OCDlBY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT9B,MAAK,SAAAkC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,WCjDjEC,IAASC,OAAO,kBAAC,EAAD,CAAKnC,OAvBN,CACb,CACEoC,MAAO,uBACPC,KAAM,2CAER,CACED,MAAO,qBACPC,KAAM,gEAER,CACED,MAAO,kBACPC,KAAM,8DAER,CACED,MAAO,sBACPC,KAAM,kEAER,CACED,MAAO,aACPC,KAAM,0DAI+BC,SAASC,eAAe,SDVlD,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,6BAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,6BAAN,sBAEP7B,IAiDV,SAAiCO,GAE/ByB,MAAMzB,GACH9B,MAAK,SAAAwD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM7D,MAAK,SAAAkC,GACjCA,EAAa4B,aAAa9D,MAAK,WAC7ByB,OAAOC,SAASqC,eAKpBlC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM7D,MAAK,WACjCyC,QAAQC,IACN,gHAMJb,EAAgBC,OCjBxBmC,GAEAC,cAAiBlE,MAAK,WACpBmE,YAAqB1C,a","file":"static/js/main.9782128a.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t18,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 13;\nmodule.exports = webpackAsyncContext;","import React from \"react\";\r\n\r\nconst Slides = ({ slides }) => {\r\n  const [current, setCurrent] = React.useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"navigation\" className=\"text-center\">\r\n        <button\r\n          data-testid=\"button-restart\"\r\n          disabled={current === 0}\r\n          onClick={() => setCurrent(0)}\r\n          className=\"small outlined\"\r\n        >\r\n          Restart\r\n        </button>\r\n        <button\r\n          data-testid=\"button-prev\"\r\n          disabled={current === 0}\r\n          onClick={() => setCurrent(current - 1)}\r\n          className=\"small\"\r\n        >\r\n          Prev\r\n        </button>\r\n        <button\r\n          data-testid=\"button-next\"\r\n          onClick={() => setCurrent(current + 1)}\r\n          disabled={current === slides.length - 1}\r\n          className=\"small\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n      <div id=\"slide\" className=\"card text-center\">\r\n        <h1 data-testid=\"title\">{slides[current][\"title\"]}</h1>\r\n        <p data-testid=\"text\">{slides[current][\"text\"]}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slides;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"h8k-components\";\r\nimport Slides from \"./components/Slides\";\r\nconst title = \"Slideshow App\";\r\n\r\nconst App = ({ slides }) => {\r\n  return (\r\n    <div>\r\n      <h8k-navbar header={title}></h8k-navbar>\r\n      <div className=\"App\">\r\n        <Slides slides={slides} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { applyPolyfills, defineCustomElements } from \"h8k-components/loader\";\r\n\r\nconst SLIDES = [\r\n  {\r\n    title: \"Today's workout plan\",\r\n    text: \"We're gonna do 3 fundamental exercises.\",\r\n  },\r\n  {\r\n    title: \"First, 10 push-ups\",\r\n    text: \"Do 10 reps. Remember about full range of motion. Don't rush.\",\r\n  },\r\n  {\r\n    title: \"Next, 20 squats\",\r\n    text: \"Squats are important. Remember to keep your back straight.\",\r\n  },\r\n  {\r\n    title: \"Finally, 15 sit-ups\",\r\n    text: \"Slightly bend your knees. Remember about full range of motion.\",\r\n  },\r\n  {\r\n    title: \"Great job!\",\r\n    text: \"You made it, have a nice day and see you next time!\",\r\n  },\r\n];\r\n\r\nReactDOM.render(<App slides={SLIDES} />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n\r\napplyPolyfills().then(() => {\r\n  defineCustomElements(window);\r\n});\r\n"],"sourceRoot":""}